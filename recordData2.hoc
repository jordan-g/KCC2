///////////////////////////////////////////////////////////////////////////////
// recordData.hoc: this script can be used to record from the simulation
///////////////////////////////////////////////////////////////////////////////

xopen("mosinit.hoc")

//-----------------------------------------------------------------------------
// user parameters

// the directory to put the file in and the file name
strdef outdir, fname
outdir = "./data/2"
fname  = "data"

// the sampling frequency for recording (in Hz)
rsamp = 2000
rstep = 1/(rsamp/1000)      // don't change this, it is the time per sample
nstep = tstop*(rsamp/1000)  // don't change this, it is the number of samples per run

//-----------------------------------------------------------------------------
// declare the vectors to store the data

objref kin_active_percent, phos_active_percent

kin_active_percent = new Vector(nstep)
phos_active_percent = new Vector(nstep)

//-----------------------------------------------------------------------------
// run the simulation
strdef filename
objref runfile

// create a File object
runfile = new File()

// open the file for writing
sprint(filename,"%s/%s.dat", outdir, fname)
runfile.wopen(filename)

// loop over cai values
for i = 1, 400 {
    // record & write kin_active and phos_active values for each value of cai
    kin_active_percent.record(&kin_active_KCC2(0.5), rstep)
    phos_active_percent.record(&phos_active_KCC2(0.5), rstep)
    init()
    cai0_ca_ion = (10*i)*1e-7
    run()
    kin_active_percent.vwrite(runfile)
    phos_active_percent.vwrite(runfile)

    // print the final kin_active and phos_active values for each run
    print "cai: ", cai0_ca_ion, "kin_active: ", kin_active_percent.x[kin_active_percent.size()-1], " phos_active: ", phos_active_percent.x[phos_active_percent.size()-1]
}

runfile.close()